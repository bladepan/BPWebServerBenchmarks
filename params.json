{"name":"Bpwebserverbenchmarks","tagline":"web server benchmark scripts, configurations","body":"BPWebServerBenchmarks\r\n=====================\r\n\r\nweb server benchmark scripts, configurations and source code \r\n\r\nJust getting started....\r\n\r\n\r\nBenchmark tools:\r\nApacheBench (or ab), a command line program bundled with Apache HTTP Server\r\nHttperf, a command line program originally developed at HP Labs\r\n\r\nThe result will be published in the project wiki.\r\n\r\nThe following web servers will be benchmarked\r\n1. Nginx\r\n2. Apache httpd\r\n3. Go Http Server -- Go build-in http server\r\n4. Node.js Http Server -- Node.js buid-in http server\r\n\r\nYou need install necessary parts to run the benchmarks.\r\n\r\n1. Serving static files\r\nThe web server will serve static files under staticfiles directory.\r\nThe files size of these files are selected based on some real world senarios. \r\nHtml file:\r\nhome page html from facebook.com is 101KB, \r\nRPC request:\r\nA periodical rpc call from facebook web page is generally from 30B to 500B. \r\nRPC calls by facebook messenger is from 1.5k to 2.6k.\r\nRPC call for story update is about 22.6k.\r\nPictures:\r\n\r\nA more clever way would be dynamically generate the files by configuration, this would be the next step.\r\n\r\n\r\n2. Reverse Proxy\r\n\r\n\r\n\r\nreference\r\nhttp://en.wikipedia.org/wiki/Web_server_benchmarking\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}